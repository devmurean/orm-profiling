#!/usr/bin/env php
<?php
$options = getopt('', [
    'db:',
    'db_password:',
    'db_username:',
    'group:',
    'help',
    'host:',
    'record:',
    'orm:',
    'memory_log',
    'xdebug',
]);
if (array_key_exists('help', $options) && $options['help'] === false) {
    echo 'php test [commands] ' . PHP_EOL .
    'Every command is mandatory ' .
    PHP_EOL . 'Commands:' . PHP_EOL .
    '    [--record int]             Number of record in database' . PHP_EOL .
    '    [--orm doctrine|eloquent]  ORM selection, either Doctrine or Eloquent ' . PHP_EOL .
    '    [--db string]              Database name' . PHP_EOL .
    '    [--db_password string]     Database password' . PHP_EOL .
    '    [--db_username string]     Database username' . PHP_EOL .
    '    [--host string]            Test target, either IP address or domain name' . PHP_EOL .
    '    [--memory_log bool]        (Optional) Indicate that the memory logging is included in test' . PHP_EOL .
    '    [--xdebug bool]            (Optional) Indicate that the xdebug profiling is included in test' . PHP_EOL .
    '    [--group string]           Decide which test group to run. ' . PHP_EOL .
    '                               Groups: crud, st, tpc, tpcc, propagation, isolation'. PHP_EOL;
    return;
}
$endpoints = [
    // CRUD Group
    'crud' => [
        [
            'method' => 'post',
            'name' => 'create',
            'value' => '/user'
        ],
        [
            'method' => 'put',
            'name' => 'update',
            'value' => '/user'
        ],
        [
            'method' => 'post',
            'name' => 'delete',
            'value' => '/user/delete'
        ],
        [
            'method' => 'get',
            'name' => 'read',
            'value' => '/user'
        ],
        [
            'method' => 'get',
            'name' => 'lookup',
            'value' => '/user/lookup'
        ],
    ],

    // ST Group
    'st' => [
        [
            'method' => 'post',
            'name' => 'create',
            'value' => '/st'
        ],
        [
            'method' => 'put',
            'name' => 'update',
            'value' => '/st'
        ],
        [
            'method' => 'post',
            'name' => 'delete',
            'value' => '/st/delete'
        ],
        [
            'method' => 'get',
            'name' => 'read',
            'value' => '/st'
        ],
        [
            'method' => 'get',
            'name' => 'lookup',
            'value' => '/st/lookup'
        ],
    ],

    // TPC Group
    'tpc' => [
        [
            'method' => 'post',
            'name' => 'create',
            'value' => '/tpc'
        ],
        [
            'method' => 'put',
            'name' => 'update',
            'value' => '/tpc'
        ],
        [
            'method' => 'post',
            'name' => 'delete',
            'value' => '/tpc/delete'
        ],
        [
            'method' => 'get',
            'name' => 'read',
            'value' => '/tpc'
        ],
        [
            'method' => 'get',
            'name' => 'lookup',
            'value' => '/tpc/lookup'
        ],
    ],

    // TPCC Group
    'tpcc' => [
        [
            'method' => 'post',
            'name' => 'create',
            'value' => '/tpcc'
        ],
        [
            'method' => 'put',
            'name' => 'update',
            'value' => '/tpcc'
        ],
        [
            'method' => 'post',
            'name' => 'delete',
            'value' => '/tpcc/delete'
        ],
        [
            'method' => 'get',
            'name' => 'read',
            'value' => '/tpcc'
        ],
        [
            'method' => 'get',
            'name' => 'lookup',
            'value' => '/tpcc/lookup'
        ],
    ],

    // Propagation Group
    'propagation' => [
        [
            'method' => 'post',
            'name' => 'create',
            'value' => '/propagation/add'
        ],
        [
            'method' => 'post',
            'name' => 'update',
            'value' => '/propagation/update'
        ],
        [
            'method' => 'post',
            'name' => 'delete',
            'value' => '/propagation/delete'
        ],
    ],

    // Isolation Group
    'isolation' => [
        [
            'method' => 'post',
            'name' => 'create',
            'value' => '/isolation/add'
        ],
        [
            'method' => 'post',
            'name' => 'update',
            'value' => '/isolation/update'
        ],
        [
            'method' => 'post',
            'name' => 'delete',
            'value' => '/isolation/delete'
        ],
    ],

];

function checkDirectoryExistence()
{
    echo 'Checking directories...' . PHP_EOL;
    if (!file_exists('memory-profiling-result')) {
        mkdir('memory-profiling-result');
    }
    if (!file_exists('xdebug-profiling-result')) {
        mkdir('xdebug-profiling-result');
    }
    if (!file_exists('load-profiling-result')) {
        mkdir('load-profiling-result');
    }
}

// Example command
// 'ab -k -n 100 -c 10 -p data.txt -T application/json localhost:8000/doctrine/user > profiling.txt'
function main(string $group, array $endpoints, array $options)
{
    checkDirectoryExistence();
    
    // Create test_database for propagation test
    $command = 'mysql -u ' . $options['db_username'] . ' -p' . $options['db_password'] .
    ' -e "CREATE DATABASE IF NOT EXISTS test_database;"';
    exec($command);

    echo 'Start profiling ' . $group . '...' . PHP_EOL;
    profile($group, $endpoints, $options);
    echo 'Done' . PHP_EOL;
    return;
}

function profile(string $group, array $endpoints, array $options): void
{
    if (!in_array($group, ['isolation', 'propagation'])) {
        execSeedingCommand($group, $options);
    }
    foreach ($endpoints[$group] as $e) {
        if ($group === 'propagation') {
            execSeedingCommand($group, $options);
        }
        execAbCommand($group, $options, $e);
    }
}

/**
 * Reset related table content
 *
 * @param string $group
 * @param array $options
 * @return void
 */
function execSeedingCommand(string $group, array $options): void
{
    echo 'Prepare database table(s)...' . PHP_EOL;
     
    $command = 'mysql -u ' . $options['db_username']
        . ' --password=' . $options['db_password'] . ' '
        . $options['db'] . ' < ./mysql-dump/' . sqlDumpMapping($group, $options['record']);

    exec($command);
}

/**
 * Run ab command
 *
 * @param string $group
 * @param array $options
 * @param array $e Single item from $endpoints[$group]
 * @return void
 */
function execAbCommand(string $group, array $options, array $e): void
{
    $orm = $options['orm'];
    $host = $options['host'];
    $isXdebugActive = array_key_exists('xdebug', $options);
    $isMemoryLogActive = array_key_exists('memory_log', $options);
    
    $endpoint = $host . '/' . $orm . $e['value'];
    $requestCount = $isXdebugActive || $isMemoryLogActive ? 1 : 1;
    // Command Builder
    echo 'Profiling ' . '['.$e['name'].'] ' . $endpoint . '...' . PHP_EOL;
    $command = 'ab -k -n ' . $requestCount . ' -c 1 ';
    $command .= $e['method'] === 'post' ? '-p data.txt -T application/json' : '';
    $command .= $e['method'] === 'put' ? '-u data.txt -T application/json' : '';
    $command .= ' ' . $endpoint;
    $command .= (!$isXdebugActive && !$isMemoryLogActive) // no file writing for xdebug or memory
        ? ' > ' . getOutputFolder($options) .
          '/' . $group . '.' . $options['record'] . '.ab.' . $e['name'] . '.' . time() . '.txt'
        : '';

    // Command Execution
    exec($command);
    echo $endpoint . ' profiled...' . PHP_EOL . PHP_EOL;
}

function getOutputFolder(array $options)
{
    if (array_key_exists('memory_log', $options)) {
        return 'memory-profiling-result';
    } elseif (array_key_exists('xdebug', $options)) {
        return 'xdebug-profiling-result';
    } else {
        return 'load-profiling-result';
    }
}

function sqlDumpMapping(string $group, $recordCount): string
{
    return $recordCount . '_' . $group . '.sql';
}

main(group: $options['group'], endpoints: $endpoints, options: $options);
